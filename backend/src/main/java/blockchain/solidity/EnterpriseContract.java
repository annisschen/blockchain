package blockchain.solidity;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.BcosFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class EnterpriseContract extends Contract {
    public static final String BINARY = "";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"signB\",\"type\":\"string\"}],\"name\":\"sign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"type_\",\"type\":\"string\"},{\"name\":\"info\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"A\",\"type\":\"string\"},{\"name\":\"B\",\"type\":\"string\"},{\"name\":\"signA\",\"type\":\"string\"}],\"name\":\"upload\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"uploadEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"signEvent\",\"type\":\"event\"}]";

    public static final String FUNC_SIGN = "sign";

    public static final String FUNC_QUERY = "query";

    public static final String FUNC_UPLOAD = "upload";

    public static final String FUNC_CONTRACTMANAGER = "contractManager";

    public static final Event UPLOADEVENT_EVENT = new Event("uploadEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SIGNEVENT_EVENT = new Event("signEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected EnterpriseContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected EnterpriseContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected EnterpriseContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected EnterpriseContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> sign(String id, String time, String signB) {
        final Function function = new Function(
                FUNC_SIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(signB)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sign(String id, String time, String signB, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(signB)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String signSeq(String id, String time, String signB) {
        final Function function = new Function(
                FUNC_SIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(signB)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> query(String id) {
        final Function function = new Function(FUNC_QUERY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> upload(String id, String hash, String type_, String info, String time, String A, String B, String signA) {
        final Function function = new Function(
                FUNC_UPLOAD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(type_), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(info), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(A), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(B), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(signA)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void upload(String id, String hash, String type_, String info, String time, String A, String B, String signA, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPLOAD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(type_), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(info), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(A), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(B), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(signA)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String uploadSeq(String id, String hash, String type_, String info, String time, String A, String B, String signA) {
        final Function function = new Function(
                FUNC_UPLOAD, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hash), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(type_), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(info), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(A), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(B), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(signA)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> contractManager() {
        final Function function = new Function(FUNC_CONTRACTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<UploadEventEventResponse> getUploadEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPLOADEVENT_EVENT, transactionReceipt);
        ArrayList<UploadEventEventResponse> responses = new ArrayList<UploadEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UploadEventEventResponse typedResponse = new UploadEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UploadEventEventResponse> uploadEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, UploadEventEventResponse>() {
            @Override
            public UploadEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPLOADEVENT_EVENT, log);
                UploadEventEventResponse typedResponse = new UploadEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UploadEventEventResponse> uploadEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPLOADEVENT_EVENT));
        return uploadEventEventFlowable(filter);
    }

    public List<SignEventEventResponse> getSignEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNEVENT_EVENT, transactionReceipt);
        ArrayList<SignEventEventResponse> responses = new ArrayList<SignEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignEventEventResponse typedResponse = new SignEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignEventEventResponse> signEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, SignEventEventResponse>() {
            @Override
            public SignEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNEVENT_EVENT, log);
                SignEventEventResponse typedResponse = new SignEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SignEventEventResponse> signEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNEVENT_EVENT));
        return signEventEventFlowable(filter);
    }

    @Deprecated
    public static EnterpriseContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new EnterpriseContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static EnterpriseContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new EnterpriseContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static EnterpriseContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new EnterpriseContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static EnterpriseContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new EnterpriseContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<EnterpriseContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EnterpriseContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<EnterpriseContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EnterpriseContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EnterpriseContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EnterpriseContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EnterpriseContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EnterpriseContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class UploadEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }

    public static class SignEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }
}
