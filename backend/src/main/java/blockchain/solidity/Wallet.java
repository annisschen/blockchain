package blockchain.solidity;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.BcosFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Wallet extends Contract {
    public static final String BINARY = "";

    public static final String ABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"actNo\",\"type\":\"string\"}],\"name\":\"queryBal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenID\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"updateToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actNo\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"credit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actNo\",\"type\":\"string\"}],\"name\":\"deleteAct\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenID\",\"type\":\"string\"},{\"name\":\"enterprise\",\"type\":\"string\"},{\"name\":\"bankID\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actNo\",\"type\":\"string\"}],\"name\":\"createAct\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actNo\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenID\",\"type\":\"string\"}],\"name\":\"queryTokenBal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"createActEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"deleteActEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"payEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"creditEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"cashEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"createTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"updateTokenEvent\",\"type\":\"event\"}]";

    public static final String FUNC_MINTER = "minter";

    public static final String FUNC_QUERYBAL = "queryBal";

    public static final String FUNC_UPDATETOKEN = "updateToken";

    public static final String FUNC_CREDIT = "credit";

    public static final String FUNC_DELETEACT = "deleteAct";

    public static final String FUNC_CREATETOKEN = "createToken";

    public static final String FUNC_CREATEACT = "createAct";

    public static final String FUNC_CASH = "cash";

    public static final String FUNC_QUERYTOKENBAL = "queryTokenBal";

    public static final Event CREATEACTEVENT_EVENT = new Event("createActEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event DELETEACTEVENT_EVENT = new Event("deleteActEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event PAYEVENT_EVENT = new Event("payEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREDITEVENT_EVENT = new Event("creditEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CASHEVENT_EVENT = new Event("cashEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATETOKENEVENT_EVENT = new Event("createTokenEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATETOKENEVENT_EVENT = new Event("updateTokenEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Wallet(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Wallet(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Wallet(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Wallet(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> minter() {
        final Function function = new Function(FUNC_MINTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> queryBal(String actNo) {
        final Function function = new Function(FUNC_QUERYBAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> updateToken(String tokenID, BigInteger amount, String time) {
        final Function function = new Function(
                FUNC_UPDATETOKEN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tokenID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void updateToken(String tokenID, BigInteger amount, String time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATETOKEN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tokenID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String updateTokenSeq(String tokenID, BigInteger amount, String time) {
        final Function function = new Function(
                FUNC_UPDATETOKEN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tokenID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

//    public RemoteCall<TransactionReceipt> updateToken(String tokenID, BigInteger bal, String time) {
//        final Function function = new Function(
//                FUNC_UPDATETOKEN,
//                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tokenID),
//                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(bal),
//                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeRemoteCallTransaction(function);
//    }
//
//    public void updateToken(String tokenID, BigInteger bal, String time, TransactionSucCallback callback) {
//        final Function function = new Function(
//                FUNC_UPDATETOKEN,
//                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tokenID),
//                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(bal),
//                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)),
//                Collections.<TypeReference<?>>emptyList());
//        asyncExecuteTransaction(function, callback);
//    }
//
//    public String updateTokenSeq(String tokenID, BigInteger bal, String time) {
//        final Function function = new Function(
//                FUNC_UPDATETOKEN,
//                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tokenID),
//                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(bal),
//                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)),
//                Collections.<TypeReference<?>>emptyList());
//        return createTransactionSeq(function);
//    }


    public RemoteCall<TransactionReceipt> credit(String actNo, BigInteger amount) {
        final Function function = new Function(
                FUNC_CREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void credit(String actNo, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String creditSeq(String actNo, BigInteger amount) {
        final Function function = new Function(
                FUNC_CREDIT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> deleteAct(String actNo) {
        final Function function = new Function(
                FUNC_DELETEACT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deleteAct(String actNo, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DELETEACT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deleteActSeq(String actNo) {
        final Function function = new Function(
                FUNC_DELETEACT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> createToken(String tokenID, String enterprise, String bankID, BigInteger amount, String time) {
        final Function function = new Function(
                FUNC_CREATETOKEN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tokenID), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(bankID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createToken(String tokenID, String enterprise, String bankID, BigInteger amount, String time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATETOKEN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tokenID), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(bankID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createTokenSeq(String tokenID, String enterprise, String bankID, BigInteger amount, String time) {
        final Function function = new Function(
                FUNC_CREATETOKEN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tokenID), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(bankID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> createAct(String actNo) {
        final Function function = new Function(
                FUNC_CREATEACT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createAct(String actNo, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEACT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createActSeq(String actNo) {
        final Function function = new Function(
                FUNC_CREATEACT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> cash(String actNo, BigInteger amount) {
        final Function function = new Function(
                FUNC_CASH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void cash(String actNo, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CASH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String cashSeq(String actNo, BigInteger amount) {
        final Function function = new Function(
                FUNC_CASH, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(actNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> queryTokenBal(String tokenID) {
        final Function function = new Function(FUNC_QUERYTOKENBAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(tokenID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public List<CreateActEventEventResponse> getCreateActEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEACTEVENT_EVENT, transactionReceipt);
        ArrayList<CreateActEventEventResponse> responses = new ArrayList<CreateActEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateActEventEventResponse typedResponse = new CreateActEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateActEventEventResponse> createActEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateActEventEventResponse>() {
            @Override
            public CreateActEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATEACTEVENT_EVENT, log);
                CreateActEventEventResponse typedResponse = new CreateActEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateActEventEventResponse> createActEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEACTEVENT_EVENT));
        return createActEventEventFlowable(filter);
    }

    public List<DeleteActEventEventResponse> getDeleteActEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEACTEVENT_EVENT, transactionReceipt);
        ArrayList<DeleteActEventEventResponse> responses = new ArrayList<DeleteActEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteActEventEventResponse typedResponse = new DeleteActEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteActEventEventResponse> deleteActEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, DeleteActEventEventResponse>() {
            @Override
            public DeleteActEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEACTEVENT_EVENT, log);
                DeleteActEventEventResponse typedResponse = new DeleteActEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteActEventEventResponse> deleteActEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEACTEVENT_EVENT));
        return deleteActEventEventFlowable(filter);
    }

    public List<PayEventEventResponse> getPayEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYEVENT_EVENT, transactionReceipt);
        ArrayList<PayEventEventResponse> responses = new ArrayList<PayEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PayEventEventResponse typedResponse = new PayEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PayEventEventResponse> payEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, PayEventEventResponse>() {
            @Override
            public PayEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAYEVENT_EVENT, log);
                PayEventEventResponse typedResponse = new PayEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PayEventEventResponse> payEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYEVENT_EVENT));
        return payEventEventFlowable(filter);
    }

    public List<CreditEventEventResponse> getCreditEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREDITEVENT_EVENT, transactionReceipt);
        ArrayList<CreditEventEventResponse> responses = new ArrayList<CreditEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreditEventEventResponse typedResponse = new CreditEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreditEventEventResponse> creditEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, CreditEventEventResponse>() {
            @Override
            public CreditEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREDITEVENT_EVENT, log);
                CreditEventEventResponse typedResponse = new CreditEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreditEventEventResponse> creditEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREDITEVENT_EVENT));
        return creditEventEventFlowable(filter);
    }

    public List<CashEventEventResponse> getCashEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CASHEVENT_EVENT, transactionReceipt);
        ArrayList<CashEventEventResponse> responses = new ArrayList<CashEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CashEventEventResponse typedResponse = new CashEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CashEventEventResponse> cashEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, CashEventEventResponse>() {
            @Override
            public CashEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CASHEVENT_EVENT, log);
                CashEventEventResponse typedResponse = new CashEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CashEventEventResponse> cashEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CASHEVENT_EVENT));
        return cashEventEventFlowable(filter);
    }

    public List<CreateTokenEventEventResponse> getCreateTokenEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATETOKENEVENT_EVENT, transactionReceipt);
        ArrayList<CreateTokenEventEventResponse> responses = new ArrayList<CreateTokenEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateTokenEventEventResponse typedResponse = new CreateTokenEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateTokenEventEventResponse> createTokenEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateTokenEventEventResponse>() {
            @Override
            public CreateTokenEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATETOKENEVENT_EVENT, log);
                CreateTokenEventEventResponse typedResponse = new CreateTokenEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateTokenEventEventResponse> createTokenEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATETOKENEVENT_EVENT));
        return createTokenEventEventFlowable(filter);
    }

    public List<UpdateTokenEventEventResponse> getUpdateTokenEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATETOKENEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateTokenEventEventResponse> responses = new ArrayList<UpdateTokenEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateTokenEventEventResponse typedResponse = new UpdateTokenEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateTokenEventEventResponse> updateTokenEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateTokenEventEventResponse>() {
            @Override
            public UpdateTokenEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATETOKENEVENT_EVENT, log);
                UpdateTokenEventEventResponse typedResponse = new UpdateTokenEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateTokenEventEventResponse> updateTokenEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATETOKENEVENT_EVENT));
        return updateTokenEventEventFlowable(filter);
    }

    @Deprecated
    public static Wallet load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Wallet(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Wallet load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Wallet(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Wallet load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Wallet(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Wallet load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Wallet(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Wallet> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Wallet.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Wallet> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Wallet.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Wallet> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Wallet.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Wallet> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Wallet.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class CreateActEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }

    public static class DeleteActEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }

    public static class PayEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }

    public static class CreditEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }

    public static class CashEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }

    public static class CreateTokenEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }

    public static class UpdateTokenEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }
}
