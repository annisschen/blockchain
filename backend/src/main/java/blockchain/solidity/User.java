package blockchain.solidity;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.BcosFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class User extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f8b806100616000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806359ae069b1461007257806383824ce71461017f578063989c406c1461028c578063d36951611461036e578063f53d0a8e146103ef575b600080fd5b34801561007e57600080fd5b50610165600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610446565b604051808215151515815260200191505060405180910390f35b34801561018b57600080fd5b50610272600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610aa7565b604051808215151515815260200191505060405180910390f35b34801561029857600080fd5b506102f3600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506113c9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610333578082015181840152602081019050610318565b50505050905090810190601f1680156103605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037a57600080fd5b506103d5600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061170c565b604051808215151515815260200191505060405180910390f35b3480156103fb57600080fd5b5061040461213a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60006060602060405190810160405280600081525090506105ab6040805190810160405280600581526020017f76616c69640000000000000000000000000000000000000000000000000000008152506000866040518082805190602001908083835b6020831015156104ce57805182526020820191506020810190506020830392506104a9565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105985780601f1061056d57610100808354040283529160200191610598565b820191906000526020600020905b81548152906001019060200180831161057b57829003601f168201915b505050505061216090919063ffffffff16565b1561077f576106666040805190810160405280600981526020017f7b226572726f72223a00000000000000000000000000000000000000000000008152506040805190810160405280601881526020017f225573657220416c7265616479204578697374732121212200000000000000008152506040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250846122a2909392919063ffffffff16565b90507f0a5740f6f1a612b019d38c5b1553b31e8b8343f1c1ee4ea9e33a16d83ad899258160405180806020018060200180602001848103845260018152602001807f3000000000000000000000000000000000000000000000000000000000000000815250602001848103835260018152602001807f3000000000000000000000000000000000000000000000000000000000000000815250602001848103825285818151815260200191508051906020019080838360005b8381101561073a57808201518184015260208101905061071f565b50505050905090810190601f1680156107675780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009150610a9f565b60a0604051908101604052808681526020016040805190810160405280600581526020017f76616c69640000000000000000000000000000000000000000000000000000008152508152602001848152602001848152602001858152506000856040518082805190602001908083835b60208310151561081457805182526020820191506020810190506020830392506107ef565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190610863929190612d13565b506020820151816001019080519060200190610880929190612d13565b50604082015181600201908051906020019061089d929190612d13565b5060608201518160030190805190602001906108ba929190612d13565b5060808201518160040190805190602001906108d7929190612d13565b509050506001849080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190610918929190612d93565b50507f0a5740f6f1a612b019d38c5b1553b31e8b8343f1c1ee4ea9e33a16d83ad899256109ae6000866040518082805190602001908083835b6020831015156109765780518252602082019150602081019050602083039250610951565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061236d565b60405180806020018060200180602001848103845260018152602001807f3100000000000000000000000000000000000000000000000000000000000000815250602001848103835260018152602001807f3000000000000000000000000000000000000000000000000000000000000000815250602001848103825285818151815260200191508051906020019080838360005b83811015610a5e578082015181840152602081019050610a43565b50505050905090810190601f168015610a8b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600191505b509392505050565b6000606060206040519081016040528060008152509050610c0c6040805190810160405280600781526020017f696e76616c6964000000000000000000000000000000000000000000000000008152506000856040518082805190602001908083835b602083101515610b2f5780518252602082019150602081019050602083039250610b0a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bf95780601f10610bce57610100808354040283529160200191610bf9565b820191906000526020600020905b815481529060010190602001808311610bdc57829003601f168201915b505050505061216090919063ffffffff16565b80610d3c5750610d3b60206040519081016040528060008152506000856040518082805190602001908083835b602083101515610c5e5780518252602082019150602081019050602083039250610c39565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d285780601f10610cfd57610100808354040283529160200191610d28565b820191906000526020600020905b815481529060010190602001808311610d0b57829003601f168201915b505050505061216090919063ffffffff16565b5b15610f1057610df76040805190810160405280600981526020017f7b226572726f72223a00000000000000000000000000000000000000000000008152506040805190810160405280601381526020017f2255736572204e6f7420457869737421212122000000000000000000000000008152506040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250846122a2909392919063ffffffff16565b90507f14dfb728c47455e2d73b5f4caeeefabeb5ad3f00b72dd26d2ea56b2ba92e49628160405180806020018060200180602001848103845260018152602001807f3000000000000000000000000000000000000000000000000000000000000000815250602001848103835260018152602001807f3100000000000000000000000000000000000000000000000000000000000000815250602001848103825285818151815260200191508051906020019080838360005b83811015610ecb578082015181840152602081019050610eb0565b50505050905090810190601f168015610ef85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600091506113c1565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111365761101d6040805190810160405280600981526020017f7b226572726f72223a00000000000000000000000000000000000000000000008152506040805190810160405280601b81526020017f224e6f7420656e6f756768207065726d697373696f6e732121212200000000008152506040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250846122a2909392919063ffffffff16565b90507f14dfb728c47455e2d73b5f4caeeefabeb5ad3f00b72dd26d2ea56b2ba92e49628160405180806020018060200180602001848103845260018152602001807f3000000000000000000000000000000000000000000000000000000000000000815250602001848103835260018152602001807f3100000000000000000000000000000000000000000000000000000000000000815250602001848103825285818151815260200191508051906020019080838360005b838110156110f15780820151818401526020810190506110d6565b50505050905090810190601f16801561111e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600091506113c1565b846000846040518082805190602001908083835b60208310151561116f578051825260208201915060208101905060208303925061114a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000190805190602001906111b8929190612d93565b50836000846040518082805190602001908083835b6020831015156111f257805182526020820191506020810190506020830392506111cd565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600301908051906020019061123b929190612d93565b507f14dfb728c47455e2d73b5f4caeeefabeb5ad3f00b72dd26d2ea56b2ba92e49626112d06000856040518082805190602001908083835b6020831015156112985780518252602082019150602081019050602083039250611273565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061236d565b60405180806020018060200180602001848103845260018152602001807f3100000000000000000000000000000000000000000000000000000000000000815250602001848103835260018152602001807f3100000000000000000000000000000000000000000000000000000000000000815250602001848103825285818151815260200191508051906020019080838360005b83811015611380578082015181840152602081019050611365565b50505050905090810190601f1680156113ad5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600191505b509392505050565b60606115196040805190810160405280600781526020017f696e76616c6964000000000000000000000000000000000000000000000000008152506000846040518082805190602001908083835b60208310151561143c5780518252602082019150602081019050602083039250611417565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115065780601f106114db57610100808354040283529160200191611506565b820191906000526020600020905b8154815290600101906020018083116114e957829003601f168201915b505050505061216090919063ffffffff16565b80611649575061164860206040519081016040528060008152506000846040518082805190602001908083835b60208310151561156b5780518252602082019150602081019050602083039250611546565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116355780601f1061160a57610100808354040283529160200191611635565b820191906000526020600020905b81548152906001019060200180831161161857829003601f168201915b505050505061216090919063ffffffff16565b5b1561168e576040805190810160405280601281526020017f55736572204e6f742045786973747321212100000000000000000000000000008152509050809050611707565b6117016000836040518082805190602001908083835b6020831015156116c957805182526020820191506020810190506020830392506116a4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061236d565b90508090505b919050565b600060606000602060405190810160405280600081525091506118736040805190810160405280600781526020017f696e76616c6964000000000000000000000000000000000000000000000000008152506000866040518082805190602001908083835b6020831015156117965780518252602082019150602081019050602083039250611771565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118605780601f1061183557610100808354040283529160200191611860565b820191906000526020600020905b81548152906001019060200180831161184357829003601f168201915b505050505061216090919063ffffffff16565b806119a357506119a260206040519081016040528060008152506000866040518082805190602001908083835b6020831015156118c557805182526020820191506020810190506020830392506118a0565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561198f5780601f106119645761010080835404028352916020019161198f565b820191906000526020600020905b81548152906001019060200180831161197257829003601f168201915b505050505061216090919063ffffffff16565b5b15611b7757611a5e6040805190810160405280600981526020017f7b226572726f72223a00000000000000000000000000000000000000000000008152506040805190810160405280601381526020017f2255736572204e6f7420457869737421212122000000000000000000000000008152506040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250856122a2909392919063ffffffff16565b91507f1c222465ff554628617374f0191f5c575d228a03e3a8e44024fa9a6bde9624878260405180806020018060200180602001848103845260018152602001807f3000000000000000000000000000000000000000000000000000000000000000815250602001848103835260018152602001807f3200000000000000000000000000000000000000000000000000000000000000815250602001848103825285818151815260200191508051906020019080838360005b83811015611b32578082015181840152602081019050611b17565b50505050905090810190601f168015611b5f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009250612133565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d9d57611c846040805190810160405280600981526020017f7b226572726f72223a00000000000000000000000000000000000000000000008152506040805190810160405280601b81526020017f224e6f7420656e6f756768207065726d697373696f6e732121212200000000008152506040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250856122a2909392919063ffffffff16565b91507f1c222465ff554628617374f0191f5c575d228a03e3a8e44024fa9a6bde9624878260405180806020018060200180602001848103845260018152602001807f3000000000000000000000000000000000000000000000000000000000000000815250602001848103835260018152602001807f3200000000000000000000000000000000000000000000000000000000000000815250602001848103825285818151815260200191508051906020019080838360005b83811015611d58578082015181840152602081019050611d3d565b50505050905090810190601f168015611d855780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009250612133565b6040805190810160405280600781526020017f696e76616c6964000000000000000000000000000000000000000000000000008152506000856040518082805190602001908083835b602083101515611e0b5780518252602082019150602081019050602083039250611de6565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190611e54929190612d93565b50600090505b600180549050811015611fb257611f2b84600183815481101515611e7a57fe5b906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f185780601f10611eed57610100808354040283529160200191611f18565b820191906000526020600020905b815481529060010190602001808311611efb57829003601f168201915b505050505061216090919063ffffffff16565b15611fa557600180808054905003815481101515611f4557fe5b90600052602060002001600182815481101515611f5e57fe5b906000526020600020019080546001816001161561010002031660029004611f87929190612e13565b5060018081818054905003915081611f9f9190612e9a565b50611fb2565b8080600101915050611e5a565b7f1c222465ff554628617374f0191f5c575d228a03e3a8e44024fa9a6bde9624876120466000866040518082805190602001908083835b60208310151561200e5780518252602082019150602081019050602083039250611fe9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902061236d565b60405180806020018060200180602001848103845260018152602001807f3100000000000000000000000000000000000000000000000000000000000000815250602001848103835260018152602001807f3200000000000000000000000000000000000000000000000000000000000000815250602001848103825285818151815260200191508051906020019080838360005b838110156120f65780820151818401526020810190506120db565b50505050905090810190601f1680156121235780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15b5050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082518451141515612177576000915061229b565b600090505b835181101561229657828181518110151561219357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916848281518110151561220e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561228b576000915061229b565b80600101905061217c565b600191505b5092915050565b6060600080600080600080875189518b518d510101016040519080825280601f01601f1916602001820160405280156122ea5781602001602082028038833980820191505090505b50965060208b01955060208a0194506020890193506020880192506020870191506000905061231d818301878d51612997565b8a5181019050612331818301868c51612997565b895181019050612345818301858b51612997565b885181019050612359818301848a51612997565b875181019050505050505050949350505050565b60606040805190810160405280600181526020017f7b0000000000000000000000000000000000000000000000000000000000000081525090506124d461248e6040805190810160405280600581526020017f7479706573000000000000000000000000000000000000000000000000000000815250846000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561247b5780601f106124505761010080835404028352916020019161247b565b820191906000526020600020905b81548152906001019060200180831161245e57829003601f168201915b50505050506129e290919063ffffffff16565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525083612c689092919063ffffffff16565b90506126036125bd6040805190810160405280600581526020017f7374617465000000000000000000000000000000000000000000000000000000815250846001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125aa5780601f1061257f576101008083540402835291602001916125aa565b820191906000526020600020905b81548152906001019060200180831161258d57829003601f168201915b50505050506129e290919063ffffffff16565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525083612c689092919063ffffffff16565b90506127326126ec6040805190810160405280600a81526020017f63726561746554696d6500000000000000000000000000000000000000000000815250846002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126d95780601f106126ae576101008083540402835291602001916126d9565b820191906000526020600020905b8154815290600101906020018083116126bc57829003601f168201915b50505050506129e290919063ffffffff16565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525083612c689092919063ffffffff16565b905061286161281b6040805190810160405280600a81526020017f75706461746554696d6500000000000000000000000000000000000000000000815250846003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128085780601f106127dd57610100808354040283529160200191612808565b820191906000526020600020905b8154815290600101906020018083116127eb57829003601f168201915b50505050506129e290919063ffffffff16565b6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525083612c689092919063ffffffff16565b905061299061294a6040805190810160405280600481526020017f6e616d6500000000000000000000000000000000000000000000000000000000815250846004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129375780601f1061290c57610100808354040283529160200191612937565b820191906000526020600020905b81548152906001019060200180831161291a57829003601f168201915b50505050506129e290919063ffffffff16565b6040805190810160405280600181526020017f7d0000000000000000000000000000000000000000000000000000000000000081525083612c689092919063ffffffff16565b9050919050565b60005b6020821015156129bf578251845260208401935060208301925060208203915061299a565b6001826020036101000a0390508019835116818551168181178652505050505050565b606060008060008060058651885101016040519080825280601f01601f191660200182016040528015612a245781602001602082028038833980820191505090505b509450602087019350602086019250602085019150600090507f22000000000000000000000000000000000000000000000000000000000000008582806001019350815181101515612a7257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612ab0818301848851612997565b8551810190507f22000000000000000000000000000000000000000000000000000000000000008582806001019350815181101515612aeb57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f3a000000000000000000000000000000000000000000000000000000000000008582806001019350815181101515612b5057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f22000000000000000000000000000000000000000000000000000000000000008582806001019350815181101515612bb557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612bf3818301858951612997565b8651810190507f22000000000000000000000000000000000000000000000000000000000000008582806001019350815181101515612c2e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050505092915050565b60606000806000806000865188518a5101016040519080825280601f01601f191660200182016040528015612cac5781602001602082028038833980820191505090505b50955060208901945060208801935060208701925060208601915060009050612cd9818301868b51612997565b885181019050612ced818301858a51612997565b875181019050612d01818301848951612997565b86518101905050505050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612d5457805160ff1916838001178555612d82565b82800160010185558215612d82579182015b82811115612d81578251825591602001919060010190612d66565b5b509050612d8f9190612ec6565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612dd457805160ff1916838001178555612e02565b82800160010185558215612e02579182015b82811115612e01578251825591602001919060010190612de6565b5b509050612e0f9190612ec6565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e4c5780548555612e89565b82800160010185558215612e8957600052602060002091601f016020900482015b82811115612e88578254825591600101919060010190612e6d565b5b509050612e969190612ec6565b5090565b815481835581811115612ec157818360005260206000209182019101612ec09190612eeb565b5b505050565b612ee891905b80821115612ee4576000816000905550600101612ecc565b5090565b90565b612f1491905b80821115612f105760008181612f079190612f17565b50600101612ef1565b5090565b90565b50805460018160011615610100020316600290046000825580601f10612f3d5750612f5c565b601f016020900490600052602060002090810190612f5b9190612ec6565b5b505600a165627a7a723058202882bc879e593c6430639dae8f55622aea10db6d67f4ff3e763b23edca502bc50029";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"types\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"createUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"types\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"changeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"queryUser\",\"outputs\":[{\"name\":\"json\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"deleteUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"createUserEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"changeInfoEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pmtType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"info\",\"type\":\"string\"}],\"name\":\"deleteUserEvent\",\"type\":\"event\"}]";

    public static final String FUNC_CREATEUSER = "createUser";

    public static final String FUNC_CHANGEINFO = "changeInfo";

    public static final String FUNC_QUERYUSER = "queryUser";

    public static final String FUNC_DELETEUSER = "deleteUser";

    public static final String FUNC_ADMINISTRATOR = "administrator";

    public static final Event CREATEUSEREVENT_EVENT = new Event("createUserEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CHANGEINFOEVENT_EVENT = new Event("changeInfoEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event DELETEUSEREVENT_EVENT = new Event("deleteUserEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected User(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected User(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected User(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected User(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> createUser(String types, String name, String time) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(types), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createUser(String types, String name, String time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(types), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createUserSeq(String types, String name, String time) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(types), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> changeInfo(String types, String time, String name) {
        final Function function = new Function(
                FUNC_CHANGEINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(types), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void changeInfo(String types, String time, String name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(types), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String changeInfoSeq(String types, String time, String name) {
        final Function function = new Function(
                FUNC_CHANGEINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(types), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> queryUser(String name) {
        final Function function = new Function(FUNC_QUERYUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> deleteUser(String name) {
        final Function function = new Function(
                FUNC_DELETEUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deleteUser(String name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DELETEUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deleteUserSeq(String name) {
        final Function function = new Function(
                FUNC_DELETEUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> administrator() {
        final Function function = new Function(FUNC_ADMINISTRATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<CreateUserEventEventResponse> getCreateUserEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEUSEREVENT_EVENT, transactionReceipt);
        ArrayList<CreateUserEventEventResponse> responses = new ArrayList<CreateUserEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateUserEventEventResponse typedResponse = new CreateUserEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateUserEventEventResponse> createUserEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateUserEventEventResponse>() {
            @Override
            public CreateUserEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATEUSEREVENT_EVENT, log);
                CreateUserEventEventResponse typedResponse = new CreateUserEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateUserEventEventResponse> createUserEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEUSEREVENT_EVENT));
        return createUserEventEventFlowable(filter);
    }

    public List<ChangeInfoEventEventResponse> getChangeInfoEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHANGEINFOEVENT_EVENT, transactionReceipt);
        ArrayList<ChangeInfoEventEventResponse> responses = new ArrayList<ChangeInfoEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangeInfoEventEventResponse typedResponse = new ChangeInfoEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChangeInfoEventEventResponse> changeInfoEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, ChangeInfoEventEventResponse>() {
            @Override
            public ChangeInfoEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHANGEINFOEVENT_EVENT, log);
                ChangeInfoEventEventResponse typedResponse = new ChangeInfoEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ChangeInfoEventEventResponse> changeInfoEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANGEINFOEVENT_EVENT));
        return changeInfoEventEventFlowable(filter);
    }

    public List<DeleteUserEventEventResponse> getDeleteUserEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEUSEREVENT_EVENT, transactionReceipt);
        ArrayList<DeleteUserEventEventResponse> responses = new ArrayList<DeleteUserEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteUserEventEventResponse typedResponse = new DeleteUserEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DeleteUserEventEventResponse> deleteUserEventEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, DeleteUserEventEventResponse>() {
            @Override
            public DeleteUserEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEUSEREVENT_EVENT, log);
                DeleteUserEventEventResponse typedResponse = new DeleteUserEventEventResponse();
                typedResponse.log = log;
                typedResponse.state = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pmtType = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.info = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DeleteUserEventEventResponse> deleteUserEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEUSEREVENT_EVENT));
        return deleteUserEventEventFlowable(filter);
    }

    @Deprecated
    public static User load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new User(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static User load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new User(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static User load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new User(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static User load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new User(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<User> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(User.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<User> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(User.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<User> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(User.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<User> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(User.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class CreateUserEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }

    public static class ChangeInfoEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }

    public static class DeleteUserEventEventResponse {
        public Log log;

        public String state;

        public String pmtType;

        public String info;
    }
}
